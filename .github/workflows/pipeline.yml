name: Pipeline

on: push

jobs:
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: 3.12.0

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: |
          poetry install --with dev --no-interaction --no-root

      - name: Run ruff
        run: |
          poetry run pre-commit run -a 

  run-tests:
    needs: code-quality
    runs-on: ubuntu-latest
    env: # Environment variables for your application.
        DEBUG: True
        APP_NAME: FastAPI IoT Simulation
        ALIGNMENT_INTERVAL: 4
        API_URL: http://api:8000/v1/temperature/
        TIMEZONE: Europe/Zurich
        DATA_INTERVAL: 5
        POSTGRES_PASSWORD: password
        POSTGRES_USER: postgres
        DATABASE_URL: postgresql+asyncpg://postgres:password@postgres:5432/temperature_service
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: 3.12.0

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: |
          poetry install --with dev --no-interaction --no-root

      - name: Run tests
        run: |
          poetry run pytest
